{"version":3,"sources":["getWeb3.js","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","NavBar","this","props","userAccount","contractOwner","workflowStatus","onClick","onIncrementWorkflow","type","className","substring","length","renderWorkflowManager","renderUserAccount","Component","App","state","storageValue","accounts","contract","voterlist","proposallist","isVoterRegistered","componentDidMount","eth","getAccounts","net","getId","networkId","alert","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","events","WorkflowStatusChange","on","event","doWhenEvent","error","VoterRegistered","ProposalRegistered","Voted","setState","runInit","methods","owner","call","getWorkflowStatus","getVoterListAddresses","getProposalCount","proposalCount","winningProposal","proposalId","proposals","proposal","push","getWinningProposal","data","response","getRegisterVoterList","getRegisterProposalList","handleIncrementWorkflow","nextWorkflowStatus","send","from","handleRegisterVoter","value","registerVoter","handleRegisterProposal","registerProposal","handleVoteForProposal","voteId","voteForProposal","clearInterval","timer","renderRegisterVoterAdd","renderRegisterVoterList","renderProposalRegistrationAdd","renderProposalRegistrationList","renderWinningProposal","Fragment","id","ref","input","scope","map","href","role","renderWorkflowStatus","renderWorkflowContent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.416d6fca.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass NavBar extends Component {\n  //state = {  }\n\n  renderWorkflowManager() {\n    console.log(\"==> renderWorkflowManager\");\n    if (this.props.userAccount === this.props.contractOwner) {\n      if (this.props.workflowStatus == 0) {\n        return (\n          <button\n            onClick={this.props.onIncrementWorkflow}\n            type=\"button\"\n            className=\"btn btn-danger\"\n          >\n            Start proposals registrations\n          </button>\n        );\n      } else if (this.props.workflowStatus == 1) {\n        return (\n          <button\n            onClick={this.props.onIncrementWorkflow}\n            type=\"button\"\n            className=\"btn btn-danger\"\n          >\n            End proposals registrations\n          </button>\n        );\n      } else if (this.props.workflowStatus == 2) {\n        return (\n          <button\n            onClick={this.props.onIncrementWorkflow}\n            type=\"button\"\n            className=\"btn btn-danger\"\n          >\n            Start Voting session\n          </button>\n        );\n      } else if (this.props.workflowStatus == 3) {\n        return (\n          <button\n            onClick={this.props.onIncrementWorkflow}\n            type=\"button\"\n            className=\"btn btn-danger\"\n          >\n            End Voting session\n          </button>\n        );\n      } else if (this.props.workflowStatus == 4) {\n        return (\n          <button\n            onClick={this.props.onIncrementWorkflow}\n            type=\"button\"\n            className=\"btn btn-danger\"\n          >\n            Tally Votes\n          </button>\n        );\n      }\n    }\n  }\n\n  renderUserAccount() {\n    if (this.props.userAccount === this.props.contractOwner) {\n      return (\n        <span className=\"badge rounded-pill bg-danger\">\n          {this.props.userAccount.substring(0, 5) +\n            \"...\" +\n            this.props.userAccount.substring(\n              this.props.userAccount.length - 3,\n              this.props.userAccount.length\n            )}\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"badge rounded-pill bg-primary\">\n          {this.props.userAccount.substring(0, 5) +\n            \"...\" +\n            this.props.userAccount.substring(\n              this.props.userAccount.length - 3,\n              this.props.userAccount.length\n            )}\n        </span>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-light bg-light\">\n        <div className=\"container-fluid\">\n          <span className=\"navbar-brand mb-0 h1\">\n            <strong>Voting Dapp4</strong>\n          </span>\n          {this.renderWorkflowManager()}\n          {this.renderUserAccount()}\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    contractOwner: null,\n    workflowStatus: null,\n    voterlist: null,\n    proposallist: null,\n    isVoterRegistered: false,\n  };\n\n  componentDidMount = async () => {\n    console.log(\"==> componentDidMount\");\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      if (networkId != 1337 && networkId != 3) {\n        alert(\n          \"Wrong Network(\" +\n            networkId +\n            \"). Please Switch to Alyra Network(1337) or Ropsten Network(3) \"\n        );\n        return;\n      }\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      console.log(\"instance\", instance);\n\n      // Set a timer to refresh the page every 10 seconds\n      /* Removed and replaced by Event Management -->\n      this.updateTimer = setInterval(() => this.runInit(), 10000); */\n\n      // Subscribe to events\n      instance.events\n        .WorkflowStatusChange()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n      instance.events\n        .VoterRegistered()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n      instance.events\n        .ProposalRegistered()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n      instance.events\n        .Voted()\n        .on(\"data\", (event) => this.doWhenEvent(event))\n        .on(\"error\", console.error);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  runInit = async () => {\n    console.log(\"==> runInit\", this.state);\n    const { accounts, contract } = this.state;\n    const contractOwner = await contract.methods.owner().call();\n    const workflowStatus = await contract.methods.getWorkflowStatus().call();\n    const voterlist = await contract.methods.getVoterListAddresses().call();\n    const proposalCount = await contract.methods.getProposalCount().call();\n    const isVoterRegistered = await contract.methods\n      .isVoterRegistered(accounts[0])\n      .call();\n    let proposallist = [];\n    let winningProposal = null;\n\n    for (let proposalId = 0; proposalId < proposalCount; proposalId++) {\n      let proposal = await contract.methods.proposals(proposalId).call();\n      proposal[\"id\"] = proposalId;\n      console.log(\"proposal\", proposal);\n      proposallist.push(proposal);\n    }\n    console.log(\"proposallist\", proposallist);\n    if (workflowStatus >= 5) {\n      winningProposal = await contract.methods.getWinningProposal().call();\n    }\n    this.setState({\n      contractOwner: contractOwner,\n      proposallist: proposallist,\n      voterlist: voterlist,\n      workflowStatus: workflowStatus,\n      winningProposal: winningProposal,\n      isVoterRegistered: isVoterRegistered,\n    });\n  };\n\n  doWhenEvent = async (data) => {\n    console.log(\"==> doWhenEvent\", data.event);\n    const { accounts, contract } = this.state;\n\n    switch (data.event) {\n      case \"WorkflowStatusChange\":\n        this.runInit();\n        break;\n      case \"VoterRegistered\":\n        const voterlist = await contract.methods.getVoterListAddresses().call();\n        this.setState({\n          voterlist: voterlist,\n        });\n        break;\n      case \"ProposalRegistered\":\n      case \"Voted\":\n        const proposalCount = await contract.methods.getProposalCount().call();\n        let proposallist = [];\n        for (let proposalId = 0; proposalId < proposalCount; proposalId++) {\n          let proposal = await contract.methods.proposals(proposalId).call();\n          proposal[\"id\"] = proposalId;\n          proposallist.push(proposal);\n        }\n        this.setState({\n          proposallist: proposallist,\n        });\n        break;\n      default:\n        console.log(\"Event not managed\");\n    }\n  };\n\n  getWorkflowStatus = async () => {\n    console.log(\"==> getWorkflowStatus\");\n    const { contract } = this.state;\n    const response = await contract.methods.getWorkflowStatus().call();\n    this.setState({ workflowStatus: response });\n  };\n\n  getRegisterVoterList = async () => {\n    console.log(\"==> getRegisterVoterList\");\n    const { contract } = this.state;\n\n    // récupérer la liste des comptes autorisés\n    const voterlist = await contract.methods.getVoterListAddresses().call();\n    // Mettre à jour le state\n    this.setState({ voterlist: voterlist });\n  };\n\n  getRegisterProposalList = async () => {\n    console.log(\"==> getRegisterProposalList\");\n    const { contract } = this.state;\n    const proposalCount = await contract.methods.getProposalCount().call();\n\n    let proposallist = [];\n    for (let proposalId = 0; proposalId < proposalCount; proposalId++) {\n      let proposal = await contract.methods.proposals(proposalId).call();\n      proposal[\"id\"] = proposalId;\n      console.log(\"proposal\", proposal);\n      proposallist.push(proposal);\n    }\n    console.log(\"proposallist\", proposallist);\n\n    this.setState({ proposallist: proposallist });\n  };\n\n  handleIncrementWorkflow = async () => {\n    console.log(\"Incrementing Workflow\");\n    const { accounts, contract } = this.state;\n    await contract.methods.nextWorkflowStatus().send({ from: accounts[0] });\n    this.runInit();\n  };\n\n  handleRegisterVoter = async () => {\n    const { accounts, contract } = this.state;\n    const address = this.address.value;\n    if (!address) {\n      alert(\"The address can't be empty !\");\n      return;\n    }\n    await contract.methods.registerVoter(address).send({ from: accounts[0] });\n    this.address.value = null;\n    this.getRegisterVoterList();\n  };\n\n  handleRegisterProposal = async () => {\n    const { accounts, contract } = this.state;\n    const proposal = this.proposal.value;\n    if (!proposal) {\n      alert(\"The proposal can't be empty !\");\n      return;\n    }\n    await contract.methods\n      .registerProposal(proposal)\n      .send({ from: accounts[0] });\n    this.proposal.value = null;\n    this.getRegisterProposalList();\n  };\n\n  handleVoteForProposal = async (voteId) => {\n    console.log(\"handleVoteForProposal\", voteId);\n    const { accounts, contract } = this.state;\n    await contract.methods.voteForProposal(voteId).send({ from: accounts[0] });\n    this.getRegisterProposalList();\n  };\n\n  renderWorkflowStatus() {\n    console.log(\"==> renderWorkflowStatus\", this.state.workflowStatus);\n    if (this.state.workflowStatus == 0) {\n      return (\n        <h1>\n          <strong>Status: </strong>Registering voters... (\n          {this.state.workflowStatus})\n        </h1>\n      );\n    } else if (this.state.workflowStatus == 1) {\n      return (\n        <h1>\n          <strong>Status: </strong>Proposal registration ongoing... (\n          {this.state.workflowStatus})\n        </h1>\n      );\n    } else if (this.state.workflowStatus == 2) {\n      return (\n        <h1>\n          <strong>Status: </strong>Proposal registration ended... (\n          {this.state.workflowStatus})\n        </h1>\n      );\n    } else if (this.state.workflowStatus == 3) {\n      return (\n        <h1>\n          <strong>Status: </strong>Voting session ongoing... (\n          {this.state.workflowStatus})\n        </h1>\n      );\n    } else if (this.state.workflowStatus == 4) {\n      return (\n        <h1>\n          <strong>Status: </strong>Voting session ended... (\n          {this.state.workflowStatus})\n        </h1>\n      );\n    } else if (this.state.workflowStatus == 5) {\n      return (\n        <h1>\n          <strong>Status: </strong>Votes tallied... ({this.state.workflowStatus}\n          )\n        </h1>\n      );\n    } else {\n      return (\n        <h1>\n          <strong>Status: </strong>Unknown Workflow Status (\n          {this.state.workflowStatus})\n        </h1>\n      );\n    }\n  }\n\n  renderWorkflowContent() {\n    console.log(\"==> renderWorkflowContent\");\n    if (this.state.workflowStatus == 0) {\n      return [this.renderRegisterVoterAdd(), this.renderRegisterVoterList()];\n    } else if (this.state.workflowStatus == 1) {\n      return [\n        this.renderProposalRegistrationAdd(),\n        this.renderProposalRegistrationList(),\n        this.renderRegisterVoterList(),\n      ];\n    } else if (\n      this.state.workflowStatus == 2 ||\n      this.state.workflowStatus == 3 ||\n      this.state.workflowStatus == 4\n    ) {\n      return [\n        this.renderProposalRegistrationList(),\n        this.renderRegisterVoterList(),\n      ];\n    } else if (this.state.workflowStatus == 5) {\n      return [\n        this.renderWinningProposal(),\n        this.renderProposalRegistrationList(),\n        this.renderRegisterVoterList(),\n      ];\n    } else {\n      return <h3>Unknown Workflow Status ({this.state.workflowStatus})</h3>;\n    }\n  }\n\n  renderRegisterVoterAdd() {\n    console.log(\"==> renderRegisterVoterAdd\");\n    if (this.state.accounts[0] === this.state.contractOwner) {\n      return (\n        <React.Fragment>\n          <br></br>\n          <div className=\"row\">\n            <div className=\"col-md-8 offset-md-2\">\n              <div className=\"card text-center\">\n                <div className=\"card-header\">\n                  <strong>Add a new Voter</strong>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"form-group\">\n                    <input\n                      type=\"text\"\n                      id=\"address\"\n                      className=\"form-control\"\n                      ref={(input) => {\n                        this.address = input;\n                      }}\n                    ></input>\n                  </div>\n                  <br></br>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-dark\"\n                    onClick={this.handleRegisterVoter}\n                  >\n                    Add\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <br></br>\n        </React.Fragment>\n      );\n    } else {\n      return;\n    }\n  }\n\n  renderRegisterVoterList() {\n    console.log(\"==> renderRegisterVoterList\");\n    const { voterlist } = this.state;\n    return (\n      <React.Fragment>\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-md-8 offset-md-2\">\n            <div className=\"card text-center\">\n              <div className=\"card-header\">\n                <strong>Registered Voters</strong>\n              </div>\n              <div className=\"card-body\">\n                <table className=\"table table-striped\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Address</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {voterlist !== null &&\n                      voterlist.map((a) => (\n                        <tr>\n                          <td>{a}</td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderProposalRegistrationAdd() {\n    console.log(\"==> renderProposalRegistrationAdd\");\n    if (this.state.isVoterRegistered) {\n      return (\n        <React.Fragment>\n          <br></br>\n          <div className=\"row\">\n            <div className=\"col-md-8 offset-md-2\">\n              <div className=\"card text-center\">\n                <div className=\"card-header\">\n                  <strong>Add a new proposal</strong>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"form-group\">\n                    <input\n                      type=\"text\"\n                      id=\"proposal\"\n                      className=\"form-control\"\n                      ref={(input) => {\n                        this.proposal = input;\n                      }}\n                    ></input>\n                  </div>\n                  <br></br>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-dark\"\n                    onClick={this.handleRegisterProposal}\n                  >\n                    Add\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <br></br>\n        </React.Fragment>\n      );\n    } else {\n      return;\n    }\n  }\n\n  renderProposalRegistrationList() {\n    console.log(\"==> renderProposalRegistrationList\");\n    const { workflowStatus, proposallist, isVoterRegistered } = this.state;\n    return (\n      <React.Fragment>\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-md-8 offset-md-2\">\n            <div className=\"card text-center\">\n              <div className=\"card-header\">\n                <strong>Proposals</strong>\n              </div>\n              <div className=\"card-body\">\n                <table className=\"table table-striped\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">#</th>\n                      <th scope=\"col\">Description</th>\n                      {workflowStatus >= 3 && <th scope=\"col\">Votes</th>}\n                      {workflowStatus == 3 && isVoterRegistered && (\n                        <th scope=\"col\">Action</th>\n                      )}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {proposallist !== null &&\n                      proposallist.map((a) => (\n                        <tr>\n                          <td>{a[\"id\"]}</td>\n                          <td>{a[\"description\"]}</td>\n                          {workflowStatus >= 3 && <td>{a[\"voteCount\"]}</td>}\n                          {workflowStatus == 3 && isVoterRegistered && (\n                            <td>\n                              <a\n                                href=\"#\"\n                                className=\"btn btn-primary\"\n                                onClick={() =>\n                                  this.handleVoteForProposal(a[\"id\"])\n                                }\n                              >\n                                Vote\n                              </a>\n                            </td>\n                          )}\n                        </tr>\n                      ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderWinningProposal() {\n    console.log(\"==> renderWinningProposal\");\n    return (\n      <React.Fragment>\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-md-8 offset-md-2\">\n            <div className=\"card text-center\">\n              <div className=\"card-header\">\n                <strong>Winning Proposal</strong>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"form-group\">\n                  <div className=\"alert alert-success\" role=\"alert\">\n                    <div>{this.state.winningProposal}</div>\n                  </div>\n                </div>\n                <br></br>\n              </div>\n            </div>\n          </div>\n        </div>\n        <br></br>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    console.log(\"==> render\");\n    if (!this.state.web3 || !this.state.workflowStatus) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <React.Fragment>\n        <NavBar\n          contractOwner={this.state.contractOwner}\n          onIncrementWorkflow={this.handleIncrementWorkflow}\n          workflowStatus={this.state.workflowStatus}\n          userAccount={this.state.accounts[0]}\n        />\n        <main className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-8 offset-2 text-center\">\n              <br></br>\n              {this.renderWorkflowStatus()}\n            </div>\n          </div>\n          <br></br>\n          {this.renderWorkflowContent()}\n          <br></br>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}